
policy {
    forbid_eap {
        if (EAP-Message) {
            reject
        }
    }

    permit_only_eap {
        if (!EAP-Message) {
            if (!"%{outer.request:EAP-Message}") {
                reject
            }
        }
    }

    deny_realms {
        if (User-Name =~ /@|\\/) {
            reject
        }
    }

    do_not_respond {
        update control {
            Response-Packet-Type := Do-Not-Respond
        }

        handled
    }

    filter_username {
        if (User-Name != "%{tolower:%{User-Name}}") {
            reject
        }

        if (User-Name =~ / /) {
            update reply {
                Reply-Message += "Rejected: Username contains whitespace"
            }
            reject
        }

        if(User-Name =~ /@.*@/ ) {
            update reply {
                Reply-Message += "Rejected: Multiple @ in username"
            }
            reject
        }

        if (User-Name =~ /\\.\\./ ) {
            update reply {
                Reply-Message += "Rejected: Username comtains ..s"
            }
            reject
        }

        if (User-Name !~ /@(.+)\\.(.+)$/)  {
            update reply {
                Reply-Message += "Rejected: Realm does not have at least one dot seperator"
            }
            reject
        }

                if (User-Name =~ /\\.$/)  {
                        update reply {
                                Reply-Message += "Rejected: Realm ends with a dot"
                        }
                        reject
                }

                if (User-Name =~ /@\\./)  {
                        update reply {
                                Reply-Message += "Rejected: Realm begins with a dot"
                        }
                        reject
                }
    }


    cui_authorize {
        update request {
            Chargeable-User-Identity:='\\000'
        }
    }

    cui_postauth {
        if (FreeRadius-Proxied-To == 127.0.0.1) {
            if (outer.request:Chargeable-User-Identity) {
                update outer.reply {
                    Chargeable-User-Identity:="%{md5:%{config:cui_hash_key}%{User-Name}}"
                }
            }
        }
        else {
            if (Chargeable-User-Identity) {
                update reply {
                    Chargeable-User-Identity="%{md5:%{config:cui_hash_key}%{User-Name}}"
                }
            }
        }
    }

    cui_updatedb {
        if (reply:Chargeable-User-Identity) {
            cui
        }
    }

    cui_accounting {
        if (!Chargeable-User-Identity) {
            update request {
                Chargeable-User-Identity := "%{cui: SELECT cui FROM cui WHERE clientipaddress = '%{Client-IP-Address}' AND callingstationid = '%{Calling-Station-Id}' AND username = '%{User-Name}'}"
            }
        }

        if (Chargeable-User-Identity && (Chargeable-User-Identity != "")) {
            cui
        }
    }

    mac-addr = ([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})

    rewrite.called_station_id {
        if((Called-Station-Id) && "%{Called-Station-Id}" =~ /^%{config:policy.mac-addr}(:(.+))?$/i) {
            update request {
                Called-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
            }

            if ("%{8}") {
                update request {
                    Called-Station-Id := "%{Called-Station-Id}:%{8}"
                }
            }
            updated
        }
        else {
            noop
        }
    }

    rewrite.calling_station_id {
        if((Calling-Station-Id) && "%{Calling-Station-Id}" =~ /^%{config:policy.mac-addr}$/i) {
            update request {
                Calling-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
            }
            updated
        }
        else {
            noop
        }
    }

    dhcp_sqlippool.post-auth {


        update request {
            User-Name = "DHCP-%{DHCP-Client-Hardware-Address}"
            Calling-Station-Id = "%{DHCP-Client-Hardware-Address}"
            NAS-IP-Address = "%{%{DHCP-Gateway-IP-Address}:-127.0.0.1}"
            Acct-Status-Type = Start
        }

        fail

        if (ok) {
            update reply {
                DHCP-Your-IP-Address = "%{reply:Framed-IP-Address}"
            }
        }
    }
}
